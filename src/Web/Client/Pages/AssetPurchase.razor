@page "/assets/purchase"
@using MRA.AssetsManagement.Web.Shared.AssetPurchases
@using MRA.AssetsManagement.Web.Shared.Assets
@using MRA.AssetsManagement.Web.Client.Services.Assets
@inject IAssetTypesService AssetTypesService
@inject IAssetsService AssetsService

<MudStack Row="true" Class="d-flex justify-space-between mb-3 pa-1">
    <MudText Typo="Typo.h4">Purchase</MudText>
    <MudButton Variant="Variant.Filled" @onclick=Create StartIcon="@Icons.Material.Filled.CreateNewFolder" Color="Color.Tertiary" Size="Size.Medium">Create</MudButton>
</MudStack>
<MudTextField @bind-Value="Vendor" Class="mb-3" T=string Label="Vendor" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate />

<MudTable Class="mb-3" Items="@AssetPurchases" Dense="true">
    <HeaderContent>
        <MudTh>Type</MudTh>
        <MudTh>Asset</MudTh>
        <MudTh>Count</MudTh>
        <MudTh>Price</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Type">
            <MudSelect @bind-Value=context.AssetType TextChanged="@(() => GetAssets(context.AssetType?.Id!))" ToStringFunc=assetTypeToStirng Label="Select Type" AnchorOrigin="Origin.BottomCenter" Margin=Margin.Dense Variant="Variant.Outlined" Clearable>
                @foreach (var assetType in AssetTypes)
                {
                    <MudSelectItem Value="assetType" />
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Asset">
            <MudSelect @bind-Value=context.Asset @ref=assetSelect Disabled=@(context.AssetType == null ? true : false) ToStringFunc=assetToStirng Label="Select Asset" AnchorOrigin="Origin.BottomCenter" Margin=Margin.Dense Variant=" Variant.Outlined" Clearable>
                @foreach (var asset in Assets)
                {
                    <MudSelectItem Value="asset" />
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Quantity">
            <MudTextField @bind-Value=context.Quantity InputType="InputType.Number" Margin=Margin.Dense Variant="Variant.Outlined" Immediate />
        </MudTd>
        <MudTd DataLabel="Price">
            <MudTextField @bind-Value=context.Price Margin=Margin.Dense Variant="Variant.Outlined" Immediate MaxLength="15" />
        </MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTh><MudButton OnClick="@(() => AddRow())" Variant="Variant.Filled" Color="Color.Tertiary" Icon="@Icons.Material.Filled.AddCircle">Add row</MudButton></MudTh>
        <MudTh />
        <MudTh/>
        <MudTh>
            <MudStack Style="justify-content:center;" Row=true>
                <MudText Typo="Typo.h5">Total:</MudText>
                <MudText Typo="Typo.h5">@CalculateTotalPrice()</MudText>
            </MudStack>
        </MudTh>
    </FooterContent>
</MudTable>

@code {
    private List<CreateAssetPurchaseDetail> AssetPurchases = new List<CreateAssetPurchaseDetail>();

    private string Vendor { get; set; } = null!;
    private MudSelect<GetAsset> assetSelect = null!;
    private List<GetAssetType> AssetTypes = null!;
    private List<GetAsset> Assets = null!;

    Func<GetAssetType, string> assetTypeToStirng = at => at.Name;
    Func<GetAsset, string> assetToStirng = a => a.Name;

    protected override async Task OnInitializedAsync()
    {
        AssetTypes =  await AssetTypesService.GetAll();
        Assets = (await AssetsService.GetAssetsById("")).ToList();
        AssetPurchases.Add(new CreateAssetPurchaseDetail());
    }

    private async void GetAssets(string id)
    {
        await assetSelect.ResetAsync();
        Assets = (await AssetsService.GetAssetsById(id)).ToList();
        StateHasChanged();
    }

    private async void Create()
    {
        CreateAssetPurchaseRequest newAssetPurchase = new() {Vendor = Vendor,  Details = AssetPurchases };
        await AssetsService.CreatePurchase(newAssetPurchase);
    }

    private void AddRow()
    {
        var newRow = new CreateAssetPurchaseDetail();
        AssetPurchases.Add(newRow);
    }

    private decimal CalculateTotalPrice()
    {
        var totalPrice =  AssetPurchases.Sum(ap => ap.Quantity * ap.Price);
        return totalPrice;
    }
}
