@page "/settings/asset-types"
@page "/settings/asset-types/{id}"
@layout SettingsLayout
@inject IAssetTypesService AssetTypesService
@inject ISnackbar Snackbar
<PageTitle>Asset Types</PageTitle>


<MudStack>
    <MudStack Row="true" Class="d-flex justify-space-between">
        <MudText Typo="Typo.h4">Asset type</MudText>
        <MudStack Class="mb-3" Row="true">
            <MudButton Variant="Variant.Filled" Disabled="_assetType.Archived" StartIcon="@Icons.Material.Filled.Save" Color="Color.Tertiary" Size="Size.Medium">Save</MudButton>
            @if (_assetType.Archived)
            {
                <MudButton Variant="Variant.Filled" @onclick="Archived" StartIcon="@Icons.Material.Filled.Archive" Color="Color.Secondary" Size="Size.Medium">Restore</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" @onclick="Archived" StartIcon="@Icons.Material.Filled.Unarchive" Color="Color.Secondary" Size="Size.Medium">Archive</MudButton>
            }
        </MudStack>
    </MudStack>

    <MudDivider/>
    <MudForm Disabled=@_assetType.Archived Style="max-width: 420px" Class="pa-4">
        @if (_loading)
        {
            <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="40px"/>
            <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="40px"/>
            <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="40px"/>
        }
        else
        {
            <MudTextField Class="mt-3" T="string" @bind-Value="@_assetType.Name"
                          Margin="Margin.Dense" Variant=Variant.Outlined
                          Label="Name" Required="true" RequiredError="Name is required!" TextChanged="AutoGenerateShortName" Immediate="true"/>
            <MudItem Class="d-flex mt-3">
                <MudTextField T="string" @bind-Value="@_assetType.ShortName" Margin="Margin.Dense" Variant=Variant.Outlined Label="Short name" Required="true" RequiredError="Short name is required!"/>
                <MudCheckBox T="bool" @bind-Value="_autoGenerateShortName" Label="Auto Generate" CheckedChanged="AutoGenerateShortName"></MudCheckBox>
            </MudItem>
            <MudSelect Value="@_assetTypeIcon" Label="Icon" Margin="Margin.Dense" Variant="Variant.Outlined" Class="mt-3">
                <MudSelectItem Value="@("Computer")">
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Outlined.Computer" Class="mr-1"/>
                        <span>Computer</span>
                    </div>
                </MudSelectItem>
                <MudSelectItem Value="@("Laptop")">
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Outlined.LaptopMac" Class="mr-1"/>
                        <span>Laptop</span>
                    </div>
                </MudSelectItem>
                <MudSelectItem Value="@("Monitor")">
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Outlined.DesktopWindows" Class="mr-1"/>
                        <span>Monitor</span>
                    </div>
                </MudSelectItem>
            </MudSelect>
        }

    </MudForm>
</MudStack>


@code {
    [Parameter] public string? Id { get; set; }

    AssetType _assetType;
    bool _loading = false;
    string _assetTypeIcon = "";
    bool _autoGenerateShortName = false;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        _assetType = new AssetType();
        _autoGenerateShortName = false;
        if (Id is not null)
        {
            _assetType = await AssetTypesService.GetAssetTypeById(Id);
        }

        _loading = false;

        _assetTypeIcon = _assetType.Name;
        StateHasChanged();
    }


    private void AutoGenerateShortName()
    {
        if (_autoGenerateShortName && !string.IsNullOrEmpty(_assetType.Name))
        {
            _assetType.ShortName = AssetTypesService.GenerateShortName(_assetType.Name);
        }
    }

    private void Archived()
    {
        _assetType.Archived = !_assetType.Archived;
    }

}