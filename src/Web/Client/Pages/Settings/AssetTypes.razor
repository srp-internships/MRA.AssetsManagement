@page "/settings/asset-types/new"
@page "/settings/asset-types/{id}"
@layout AssetTypesLayout
@inject IAssetTypesService AssetTypesService
@inject ISnackbar Snackbar

@if (assetType == null)
{
    <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="300px" />
}
else
{
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudStack Class="mb-3" Row="true">
                <MudButton Variant="Variant.Filled" Disabled="assetType.Archived" StartIcon="@Icons.Material.Filled.Save" Color="Color.Tertiary" Size="Size.Medium">Save</MudButton>
                @if (assetType.Archived)
                {
                    <MudButton Variant="Variant.Filled" @onclick="Archived" StartIcon="@Icons.Material.Filled.Archive" Color="Color.Secondary" Size="Size.Medium">Restore</MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" @onclick="Archived" StartIcon="@Icons.Material.Filled.Unarchive" Color="Color.Secondary" Size="Size.Medium">Archive</MudButton>
                }
            </MudStack>
            <MudDivider />
            <MudForm Disabled=@assetType.Archived>
                <MudTextField Class="mt-3" T="string" @bind-Value="@assetType.Name"
                              Margin="Margin.Dense" Variant=Variant.Outlined
                              Label="Name" Required="true" RequiredError="Name is required!" TextChanged="AutoGenerateShortName" Immediate="true" />
                <MudItem Class="d-flex mt-3">
                    <MudTextField T="string" @bind-Value="@assetType.ShortName" Margin="Margin.Dense" Variant=Variant.Outlined Label="Short name" Required="true" RequiredError="Short name is required!" />
                    <MudCheckBox T="bool" @bind-Value="autoGenerateShortName" Label="Auto Generate" CheckedChanged="AutoGenerateShortName" ></MudCheckBox>
                </MudItem>
                <MudSelect Value="@assetTypeIcon" Label="Icon" Margin="Margin.Dense" Variant="Variant.Outlined" Class="mt-3">
                    <MudSelectItem Value="@("Computer")">
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Outlined.Computer" Class="mr-1" />
                            <span>Computer</span>
                        </div>
                    </MudSelectItem>
                    <MudSelectItem Value="@("Laptop")">
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Outlined.LaptopMac" Class="mr-1" />
                            <span>Laptop</span>
                        </div>
                    </MudSelectItem>
                    <MudSelectItem Value="@("Monitor")">
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Outlined.DesktopWindows" Class="mr-1" />
                            <span>Monitor</span>
                        </div>
                    </MudSelectItem>
                </MudSelect>
            </MudForm>
        </MudPaper>
    </MudItem>
}



@code {
    [Parameter]
    public string? Id { get; set; }

    AssetType assetType = null!;
    string assetTypeIcon = "";
    bool autoGenerateShortName = false;

    protected override async Task OnParametersSetAsync()
    {
        assetType = new AssetType();
        autoGenerateShortName = false;
        if (Id is not null)
        {
            assetType = await AssetTypesService.GetAssetTypeById(Id);
        }
        assetTypeIcon = assetType.Name;
        StateHasChanged();
    }


    private void AutoGenerateShortName()
    {
        if (autoGenerateShortName && !string.IsNullOrEmpty(assetType.Name))
        {
            assetType.ShortName = AssetTypesService.GenerateShortName(assetType.Name);
        }

    }

    private void Archived()
    {
        assetType.Archived = !assetType.Archived;
    }
}
