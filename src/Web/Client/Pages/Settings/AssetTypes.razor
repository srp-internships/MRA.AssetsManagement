@page "/settings/asset-types"
@page "/settings/asset-types/{slug}"
@layout SettingsLayout
@inject IIconService IconService
@using MRA.AssetsManagement.Web.Client.Components.MenuItems
@inject IAssetTypesService AssetTypesService;
@inject IMenuItemService MenuItemService;
@inject ISnackbar Snackbar
@attribute [Authorize]



<PageTitle>Asset Types</PageTitle>

<MudStack>
    <MudStack Row="true" Class="d-flex justify-space-between">
        <MudText Typo="Typo.h4">Asset type</MudText>
        <MudStack Class="mb-3" Row="true">
            <MudButton Variant="Variant.Filled" @onclick=CreateOrUpdate Disabled="_getAssetType.Archived" StartIcon="@Icons.Material.Filled.Save" Color="Color.Tertiary" Size="Size.Medium">Save</MudButton>
            <MudButton 
                Variant="Variant.Filled" 
                @onclick="ArchiveOrRestore" 
                Disabled="@string.IsNullOrEmpty(Slug)" 
                StartIcon="@(_getAssetType.Archived ? Icons.Material.Filled.Unarchive : Icons.Material.Filled.Archive)" 
                Color="Color.Secondary" 
                Size="Size.Medium">
                @( _getAssetType.Archived ? "Restore" : "Archive")
            </MudButton>
        </MudStack>
    </MudStack>

    <MudDivider/>
    <MudForm Disabled=@_getAssetType.Archived Style="max-width: 420px" Class="pa-4">

        @if (_loading)
        {
            <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="40px"/>
            <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="40px"/>
            <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="40px"/>
        }
        else
        {
            <MudTextField Class="mt-3" T="string" @bind-Value="@_getAssetType.Name"
                          Margin="Margin.Dense" Variant=Variant.Outlined
                          Label="Name" Required="true" RequiredError="Name is required!" TextChanged="AutoGenerateShortName" Immediate="true"/>
            <MudItem Class="d-flex mt-3">
                <MudTextField T="string" @bind-Value="@_getAssetType.ShortName" Disabled=@(Slug != null) Margin="Margin.Dense" Variant=Variant.Outlined Label="Short name" Required="true" RequiredError="Short name is required!"/>
                <MudCheckBox T="bool" @bind-Value="_autoGenerateShortName" Disabled=@(Slug != null) Label="Auto Generate" />
            </MudItem>
            <MudSelect @bind-Value="_getAssetType.Icon" Immediate=true Label="Icon" Margin="Margin.Dense" Variant="Variant.Outlined" Class="mt-3">

               @foreach (var icon in IconService.GetIcons())
                {
                    <MudSelectItem Value="@(icon.Key)">
                        <div class="d-flex">
                            <MudIcon Icon="@icon.Value" Class="mr-1" />
                            <span>@icon.Key</span>
                        </div>
                    </MudSelectItem>
                } 

            </MudSelect>
        }
    </MudForm>
</MudStack>
<SectionContent SectionName="@nameof(MenuItemList)">
    <MenuItemList Service="AssetTypesService" BaseRoute="/settings/asset-types"/>
</SectionContent>

@code {
    [Parameter] public string? Slug { get; set; }

    GetAssetType _getAssetType = null!;
    bool _loading = false;
    bool _autoGenerateShortName = false;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        _autoGenerateShortName = false;
        _getAssetType = new GetAssetType();

        if (Slug is not null)
        {
            _getAssetType = await AssetTypesService.GetAssetTypeBySlug(Slug)!;
        }

        _loading = false;

        StateHasChanged();
    }

    private void AutoGenerateShortName()
    {
        if (_autoGenerateShortName && !string.IsNullOrEmpty(_getAssetType.Name))
        {
            _getAssetType.ShortName = _getAssetType.Name.ToShortName();
        }
    }

    private async void CreateOrUpdate()
    {
        if (Slug is not null)
        {
            await AssetTypesService.Update(_getAssetType);
            MenuItemService.OnChangeMenuItem(MenuItemEvent.Update, _getAssetType.ToMenuItem());
        }
        else
        {
            CreateAssetTypeRequest newAssetType = new CreateAssetTypeRequest();
            {
                newAssetType.Name = _getAssetType.Name;
                newAssetType.ShortName = _getAssetType.ShortName;
                newAssetType.Icon = _getAssetType.Icon;
            }

            _getAssetType = await AssetTypesService.Create(newAssetType);
            MenuItemService.OnChangeMenuItem(MenuItemEvent.Add, _getAssetType.ToMenuItem());
            _getAssetType = new GetAssetType();
        }
        StateHasChanged();
    }

    private async void ArchiveOrRestore()
    {
        _getAssetType.Archived = !_getAssetType.Archived;
        await AssetTypesService.Update(_getAssetType);
        MenuItemService.OnChangeMenuItem(MenuItemEvent.Update, _getAssetType.ToMenuItem());
    }
}
