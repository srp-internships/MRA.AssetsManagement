@page "/settings/tags"
@page "/settings/tags/{id}"
@layout SettingsLayout
@using MRA.AssetsManagement.Web.Shared.Tags
@inject ITagsService TagsService

<MudStack>
    <MudStack Row="true" Class="d-flex justify-space-between">
        <MudText Typo="Typo.h4">Tags</MudText>
        <MudStack Class="mb-3" Row="true">
            <MudButton Variant="Variant.Filled" @onclick=CreateOrUpdate StartIcon="@Icons.Material.Filled.Save" Color="Color.Tertiary" Size="Size.Medium">Save</MudButton>
            <MudButton Variant="Variant.Filled" @onclick="Delete" Disabled=@(string.IsNullOrEmpty(Id) ? true : false) StartIcon="@Icons.Material.Filled.Delete" Color="Color.Secondary" Size="Size.Medium">Delete</MudButton>
        </MudStack>
    </MudStack>

    <MudDivider />
    <MudForm id="form" Style="max-width: 420px" Class="pa-4">
        @if (_loading)
        {
            <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="40px" />
            <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="40px" />
            <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="40px" />
        }
        else
        {
            <MudTextField Class="mt-3" T="string" @bind-Value="_getTags.Name"
                          Margin="Margin.Dense" Variant=Variant.Outlined
                          Label="Name" Required="true" RequiredError="Name is required!" Immediate="true" />

            <MudStack Class="mt-3" Style="position: relative" Row=true AlignItems="AlignItems.End">
                <MudColorPicker @bind-Text="@_getTags.Color" DisableToolbar="false" Label="Color" Adornment="Adornment.None"
                                PickerVariant="PickerVariant.Inline" Margin=Margin.Dense Variant=Variant.Outlined
                                ColorPickerView="ColorPickerView.Spectrum" DisableInputs=true />
                <MudPaper Class="mb-3 mr-3" Style="@($"background-color: {_getTags.Color}; position:absolute; right: 0")" Width="25px" Height="25px"></MudPaper>


            </MudStack>
        }

    </MudForm>
</MudStack>
<SectionContent SectionName="menu-items">
    <SettingsMenuItemList menuItems="TagsService.MenuItems" />
</SectionContent>
<SectionContent SectionName="new-button">
    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" aria-label="github" Href="settings/tags"></MudIconButton>
</SectionContent>

@code {
    [Parameter]
    public string? Id { get; set; }


    GetTags _getTags = new GetTags();
    bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        await TagsService.GetMenuItems();
    }

    protected override void OnParametersSet()
    {
        _loading = true;
        _getTags = new GetTags();
        if (Id is not null)
        {
            _getTags = TagsService.Tags.FirstOrDefault(t => t.Id == Id)!;
        }
        _loading = false;
        StateHasChanged();
    }


    private async void CreateOrUpdate()
    {
        if (Id is not null)
        {
            await TagsService.Update(_getTags);
        }
        else
        {
            CreateTagRequest newTag = new CreateTagRequest()
            {
                Name = _getTags.Name,
                Color = _getTags.Color
            };

            await TagsService.Create(newTag);
        }
        StateHasChanged();
    }

    private async void Delete()
    {
        await TagsService.Delete(_getTags.Id);
        StateHasChanged();

    }
}