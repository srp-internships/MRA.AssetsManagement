@page "/employees"
@page "/employees/{userName}"

@attribute [Authorize]
@using MRA.AssetsManagement.Web.Client.Common.Extensions
@using MRA.AssetsManagement.Web.Client.Components.MenuItems
@using MRA.AssetsManagement.Web.Shared.Employees
@using MRA.AssetsManagement.Web.Shared.AssetSerials
@using Blazored.FluentValidation
@layout SettingsLayout
@inject IEmployeesService EmployeesService
@inject IMenuItemService MenuItemService
@inject IAssetTypesService AssetTypesService

@if (_loading)
{
    <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="40px" />
    <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="40px" />
    <MudSkeleton Class="mt-3" SkeletonType="SkeletonType.Rectangle" Animation=Animation.Wave Width="400px" Height="40px" />
}
else if(UserName is null)
{
    <EditForm Model="_createEmployee" OnValidSubmit="CreateOrUpdate">
        <FluentValidationValidator />
        <MudStack Row=true Class="d-flex justify-space-between mb-5">
            <MudText Typo="Typo.h4">Employee</MudText>
            <MudButton ButtonType=ButtonType.Submit Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Tertiary" Size="Size.Medium">Save</MudButton>
        </MudStack>
        <MudDivider />
        <MudStack Class="mt-3 pa-4" Style=" max-width: 500px">
            <MudTextField @bind-Value=_createEmployee.Email Label="Email" InputType="InputType.Email" Margin="Margin.Dense" Variant="Variant.Outlined" For="@(() => _createEmployee.Email)" />
            <MudStack Row=true>
                <MudTextField @bind-Value=_createEmployee.FirstName Label="First name" Margin="Margin.Dense" Variant="Variant.Outlined" For="@(() => _createEmployee.FirstName)" />
                <MudTextField @bind-Value=_createEmployee.LastName Label="Last name" Margin="Margin.Dense" Variant="Variant.Outlined" For="@(() => _createEmployee.LastName)" />
            </MudStack>
            <MudStack Row=true>
                <MudTextField @bind-Value=_createEmployee.Username Label="Username" Margin="Margin.Dense" Variant="Variant.Outlined" For="@(() => _createEmployee.Username)" />
                <MudTextField @bind-Value=_createEmployee.PhoneNumber Label="Phone" Margin="Margin.Dense" Variant="Variant.Outlined" />
            </MudStack>
            <MudStack Row=true>
                <MudTextField @bind-Value=_createEmployee.Password Label="Password" InputType="InputType.Password" Margin="Margin.Dense" Variant="Variant.Outlined" For=@(() => _createEmployee.Password) />
                <MudTextField @bind-Value=_createEmployee.ConfirmPassword Label="Confirm password" InputType="InputType.Password" Margin="Margin.Dense" Variant="Variant.Outlined" For="@(() => _createEmployee.ConfirmPassword)" />
            </MudStack>
        </MudStack>
    </EditForm>
}
else
{
    <MudText Typo="Typo.h5">@_getEmployee.FullName</MudText>
    <MudDivider />
    <MudStack Class="mt-3 mb-3" Row=true>
        <MudText>Email</MudText>
        <MudLink Href=@($"mailto:{_getEmployee.Email}")>@_getEmployee.Email</MudLink>
    </MudStack>
    <MudStack Row=true>
        <MudText>Phone</MudText>
        <MudLink Href="@($"tel:{_getEmployee.PhoneNumber}")">@_getEmployee.PhoneNumber</MudLink>
    </MudStack>

    <EmployeeAssign UserName="@UserName" Employee="@_getEmployee" AssetTypeSerials="@AssetTypeSerials" UpdateAssetTypeSerials="UpdateAssetTypeSerials" />
}

<SectionContent SectionName="@nameof(MenuItemList)">
    <MenuItemList Service="EmployeesService" BaseRoute="/employees" />
</SectionContent>


@code {
    
    [Parameter] public string? UserName { get; set; }
    GetEmployee _getEmployee = null!;
    CreateEmployeeRequest _createEmployee = new CreateEmployeeRequest();
    bool _loading = false;

    private List<GetAssetTypeSerial> AssetTypeSerials = new List<GetAssetTypeSerial>();

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        
        if (UserName is not null)
        {
            _getEmployee = await EmployeesService.GetEmployeeByUserName(UserName!);
        }
        
        _loading = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        AssetTypeSerials = await AssetTypesService.GetAssetTypeSerials();
        _loading = false;
    }

    public async Task UpdateAssetTypeSerials()
    {
        AssetTypeSerials = await AssetTypesService.GetAssetTypeSerials();
        StateHasChanged();
    }

    private async void CreateOrUpdate()
    {
        if (UserName is null)
        {
            _getEmployee = await EmployeesService.Create(_createEmployee);
            MenuItemService.OnChangeMenuItem(MenuItemEvent.Add, _getEmployee.ToMenuItem());
            _createEmployee = new CreateEmployeeRequest();
        }

        else
        {
            //update
        }
        StateHasChanged();
    }

}
