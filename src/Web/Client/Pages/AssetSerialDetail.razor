@attribute [Authorize(Roles = "SuperAdmin, ApplicationAdmin")]
@inject IAssetSerialService AssetSerialService
@inject IEmployeesService EmployeesService
@inject ITagsService TagsService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<MudDrawer Open="true" Width="500px" Height="100%" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary"
    DisableOverlay="true">
    <MudDrawerHeader Class="pa-1">
        <div
            style="width: 100%; display: flex; flex-direction: row; justify-content: space-between; align-items: center">
            <div>
                <MudIconButton Icon="@Icons.Material.Rounded.Close"
                    OnClick="@(() => NavigationManager.NavigateTo("/assets"))"></MudIconButton>
            </div>
            @if (isLoading)
            {
                <div style="display: flex; width: 100%; padding-left: 1rem; padding-right: 1rem">
                    <MudSkeleton Height="1rem" Width="100%" />
                </div>
            }
            else
            {
                <div>
                    <MudText Align="Align.Center"><b>@assetSerial.Serial</b></MudText>
                </div>
                <div>
                    <MudChip Icon="@Icons.Material.Filled.Save" Color="Color.Info" Disabled="@(!isSerialHasChanged)"
                        OnClick="@OnSave">Save</MudChip>
                </div>
            }
        </div>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudDivider />
        <MudStack Class="ps-4 pe-4">
            @if (isLoading)
            {
                <MudSkeleton Height="3rem" class="mt-3" />
                <MudSkeleton Height="3rem" />
                <MudSkeleton Height="3rem" />
            }
            else
            {
                <MudStack Row="true" AlignItems="AlignItems.Center" Style="flex-wrap: wrap">
                    <MudText>
                        <b>Tags: </b>
                    </MudText>
                    @foreach (var tag in assetSerial.Tags)
                    {
                        <MudChip Style="@($"{GetChipColor(tag.Color)} {GetChipTextColor(tag.Color)}")" OnClose="@(e => AddOrRemoveTag(assetSerial.Id, tag.Id, false))" Size="Size.Small">@tag.Name</MudChip>
                    }
                    <MudMenu Icon="@Icons.Material.Filled.Add" TransformOrigin="Origin.TopCenter" AnchorOrigin="Origin.BottomCenter" Dense="true">
                        @foreach (var tag in Tags.Where(x => !assetSerial.Tags.Any(a => a.Id == x.Id)))
                        {
                            <MudMenuItem OnClick="@(e => AddOrRemoveTag(assetSerial.Id, tag.Id, true))">
                                <MudChip Style="@($"{GetChipColor(tag.Color)} {GetChipTextColor(tag.Color)}")" Size="Size.Small">@tag.Name</MudChip>
                            </MudMenuItem>
                        }
                    </MudMenu>
                </MudStack>
                <MudText>
                    <b>Asset: </b>@assetSerial.Name
                </MudText>
                foreach (var property in assetSerial.Properties)
                {
                    <MudText><b>@property.Label:</b> @property.Value</MudText>
                }
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudText>
                        <b>Status: </b>
                    </MudText>
                    <MudSelect Value="assetSerial.Status" T="AssetStatus" Margin="Margin.Dense" Variant="Variant.Outlined"
                        ValueChanged="@OnStatusItemChanged">
                        <MudSelectItem Value="@(AssetStatus.Available)">
                            <MudText Color="Color.Success">@(AssetStatus.Available.ToString())</MudText>
                        </MudSelectItem>
                        <MudSelectItem Value="@(AssetStatus.Taken)">
                            <MudText Color="Color.Info">@(AssetStatus.Taken.ToString())</MudText>
                        </MudSelectItem>
                        <MudSelectItem Value="@(AssetStatus.Broken)">
                            <MudText Color="Color.Error">@(AssetStatus.Broken.ToString())</MudText>
                        </MudSelectItem>
                        <MudSelectItem Value="@(AssetStatus.Deprecated)">@(AssetStatus.Deprecated.ToString())
                        </MudSelectItem>
                    </MudSelect>
                </MudStack>
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudText>
                        <b>Assigned To: </b>
                    </MudText>
                    <MudAutocomplete Value="@assetSerial.Employee" T="UserDisplay" Margin="Margin.Dense"
                        SearchFunc="@SearchEmployees" Variant="Variant.Outlined"
                        ValueChanged="@(e => OnAssignedPersonChanged(e))" />
                </MudStack>
            }
            <AssetSerialHistory Serial="@Serial" ShowHistory="@showHistory" />
        </MudStack>
    </MudNavMenu>

    <NoteDialog />
</MudDrawer>


@code {
    
    [Parameter] public string Serial { get; set; } = null!;
    private string prevSerial = string.Empty;
    [Parameter] public EventCallback OnSaveButtonClicked { get; set; }
    public GetAssetSerial assetSerial = null!;
    private IEnumerable<UserDisplay> UserDisplays = [];
    private List<GetTag> Tags = [];
    private bool showHistory = false;
    private bool isLoading = true;
    private bool isSerialHasChanged = false;

    protected override async Task OnInitializedAsync()
    {
        UserDisplays = (await EmployeesService.GetEmployees()).Select(x => new UserDisplay
        {
            UserName = x.UserName,
            FirstName = x.FullName.Split(" ")[0],
            LastName = x.FullName.Split(" ")[1]
        }).OrderBy(x => x.FirstName);
        Tags = await TagsService.GetAll();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Serial is not null && prevSerial != Serial)
        {
            assetSerial = await AssetSerialService.GetBySerial(Serial);
            isLoading = false;
            prevSerial = Serial;
            showHistory = false;
        }
    }

    private void OnStatusItemChanged(AssetStatus newValue)
    {
        if (newValue != AssetStatus.Taken)
            assetSerial.Employee = null;
        assetSerial.Status = newValue;
        isSerialHasChanged = true;
    }

    private void OnAssignedPersonChanged(UserDisplay userDisplay)
    {
        assetSerial.Employee = userDisplay;

        isSerialHasChanged = true;

        assetSerial.Status = AssetStatus.Taken;
    }

    private void OnSave()
    {
        if (assetSerial.Status == AssetStatus.Taken && assetSerial.Employee is null)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
            Snackbar.Add("Please, select the Employee", Severity.Error);
            return;
        }

        DialogParameters parameters = new DialogParameters();
        parameters.Add("AssetSerial", assetSerial);
        parameters.Add("OnSaveButtonClicked", OnSaveButtonClicked);
        DialogService.Show<NoteDialog>("Note", parameters);
    }

    private async Task<IEnumerable<UserDisplay>> SearchEmployees(string value)
    {
        if (string.IsNullOrEmpty(value))
            return await Task.FromResult(UserDisplays.ToArray());

        value = value.ToUpper().Trim();
        return await Task.FromResult(UserDisplays.Where(x => x.FirstName.ToUpper().Contains(value) ||
        x.LastName.ToUpper().Contains(value)));
    }

    private string GetChipColor(string color)
    {
        return $"background-color: {color};";
    }

    private async Task AddOrRemoveTag(string assetSerialId, string tagId, bool isAdd)
    {
        var tags = await AssetSerialService.SetTagsToAssetSerial(new SetTagsToAssetSerialsRequest() {AssetSerialId = assetSerialId, TagId = tagId, IsAdd = isAdd});
        assetSerial.Tags = tags;
    }

    private string GetChipTextColor(string hexColor)
    {
        System.Drawing.Color color = System.Drawing.ColorTranslator.FromHtml(hexColor);
        double luminance = (0.2126 * color.R + 0.7152 * color.G + 0.0722 * color.B) / 255;

        // Set threshold value (0.5 is a common choice)
        double threshold = 0.5;

        return luminance <= threshold ? "color: white;" : "color: black;";
    }
}