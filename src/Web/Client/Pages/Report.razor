@page "/report"
@attribute [Authorize]
@using MRA.AssetsManagement.Web.Client.Services.ReportService
@using MRA.AssetsManagement.Web.Shared.Purchas
@inject IReportService ReportService
@inject IAssetTypesService AssetTypesService
@inject IIconService IconService

<MudCard Class="pa-3">
    <MudCartContent>
        <MudItem>
            <MudStack Row="true" Justify="Justify.SpaceBetween">
                <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowLeft" aria-label="delete" OnClick="SubstractMonth"/>
                <MudDateRangePicker @bind-DateRange="_dateRange" Variant="Variant.Outlined" Margin="Margin.Dense" MaxDate="DateTime.Today"/>
                <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowRight" aria-label="delete" OnClick="AddMonth"/>
                <MudSelect Margin="Margin.Dense" T="string" Label="Type" Variant="Variant.Outlined" @bind-Value="@SelectedType">
                    @foreach (var type in _types)
                    {
                        <MudSelectItem Value="@type.Name">
                            <MudStack Row="true" Spacing="2">
                                <MudIcon Icon="@IconService.GetIcon(type.Name)"/>
                                <MudText>@type.Name</MudText>
                            </MudStack>
                        </MudSelectItem>
                    }
                </MudSelect>

                <MudSpacer/>
                <MudButton Disabled="@_processing" OnClick="ProcessSomething" Variant="Variant.Filled" Color="Color.Primary">
                    <MudText>Go</MudText>
                </MudButton>
            </MudStack>
        </MudItem>
        <MudItem Class="mt-3">
            <h5>All units: @_purchases.Count</h5>
        </MudItem>
    </MudCartContent>
</MudCard>

@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}

<MudTable Items="@_purchases" Hover="true" Dense="true" FixedHeader="true" Class="mt-3">
    <HeaderContent>
        <MudTh>Type</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Price</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (_loading)
        {
            <MudTd DataLabel="Type">
                <MudSkeleton/>
            </MudTd>
            <MudTd DataLabel="Name">
                <MudSkeleton/>
            </MudTd>
            <MudTd DataLabel="Date">
                <MudSkeleton/>
            </MudTd>
            <MudTd DataLabel="Quantity">
                <MudSkeleton/>
            </MudTd>
            <MudTd DataLabel="Price">
                <MudSkeleton/>
            </MudTd>
        }
        else
        {
            <MudTd DataLabel="Type">
                <MudStack Row="true" Spacing="2">
                    <MudIcon Icon="@IconService.GetIcon(context.AssetType!)"/>
                    <MudText>@context.AssetType</MudText>
                </MudStack>
            </MudTd>
            <MudTd DataLabel="Name">@context.AssetName</MudTd>
            <MudTd DataLabel="Date">@context.DateTime</MudTd>
            <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
        }
    </RowTemplate>
    <FooterContent>
        @if (_purchases.Count != 0)
        {
            <MudTd>
                <b>Total price</b>
            </MudTd>
            <MudTd></MudTd>
            <MudTd></MudTd>
            <MudTd></MudTd>
            <MudTd><b>@TotalPrice</b></MudTd>
        }
        else
        {
            <MudTd></MudTd>
            <MudTd></MudTd>
            <MudTd><MudText Style="font-size: 20px;">Nothing found</MudText></MudTd>
            <MudTd></MudTd>
            <MudTd></MudTd>
        }
    </FooterContent>
</MudTable>

@code {

    private bool _loading = false;
    private DateRange _dateRange = new DateRange(DateTime.Today.AddDays(-2), DateTime.Today);
    private string? SelectedType { get; set; }
    private List<GetAssetType> _types = [];
    private List<GetPurchasedAssets> _purchases = [];
    private readonly bool _processing = false;
    private decimal TotalPrice => _purchases.Sum(item => item.Price);

    protected override async Task OnInitializedAsync()
    {
        _types.Add(new GetAssetType() { Name = "All", Icon = "circle"});
        SelectedType = _types.FirstOrDefault()?.Name;
        _loading = true;
        _types.AddRange(await AssetTypesService.GetAll());
        _loading = false;
    }

    private void AddMonth()
    {
        _dateRange = new DateRange(_dateRange.Start?.AddMonths(1), _dateRange.End?.AddMonths(1));
        StateHasChanged();
    }

    private void SubstractMonth()
    {
        _dateRange = new DateRange(_dateRange.Start?.AddMonths(-1), _dateRange.End?.AddMonths(-1));
        StateHasChanged();
    }

    private async Task ProcessSomething()
    {
        _loading = true;
        var id = _types.FirstOrDefault(x => x.Name == SelectedType)?.Id;
        _purchases = await ReportService.GetPurchases(new PurchasedAssetsRequest()
        {
            FromDate = _dateRange.Start!.Value,
            ToDate = _dateRange.End!.Value,
            AssetTypeId = id
        });
        if (SelectedType != _types[0].Name)
        {
            _purchases = _purchases.Where(x => x.AssetType == SelectedType).ToList();
        }
        _loading = false;
        StateHasChanged();
    }
}