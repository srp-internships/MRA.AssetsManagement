@using MRA.AssetsManagement.Web.Client.Pages
@using MRA.AssetsManagement.Web.Client.Services.AssetSerials
@using MRA.AssetsManagement.Web.Shared.Assets
@using MRA.AssetsManagement.Web.Shared.Employees
@inject IEmployeesService EmployeesService
@inject IAssetTypesService AssetTypesService
@inject IAssetSerialService AssetSerialService
@inject NavigationManager NavigationManager

<MudTable T="GetEmployeeAssetSerials" Class="mt-4" Items="@Elements">
    <HeaderContent>
        <MudTh>Serial</MudTh>
        <MudTh>Asset Name</MudTh>
        <MudTh>From</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Serial">@context.Serial</MudTd>
        <MudTd DataLabel="Asset Name">@context.AssetName</MudTd>
        <MudTd DataLabel="From">@context.From.ToString("dd MMMM yyyy")</MudTd>
    </RowTemplate>
</MudTable>

<MudMenu 
    Label="Assign Asset"
    AnchorOrigin="Origin.BottomCenter"
    TransformOrigin="Origin.TopCenter"
    Variant="Variant.Filled"
    Color="Color.Info"
    FullWidth="true"
    Class="mt-3"
    Dense="true"
    Style="min-width: 300px"
    IsOpenChanged="@((e) => showAssetTypes = e)"
>
    @if (showAssetTypes)
    {
        <MudTextField Placeholder="Filter items" T="string" Margin="Margin.Dense" Variant="Variant.Outlined" Immediate="true" TextChanged="@((e) => filterAssetTypes = e)" Class="ps-2 pe-2"/>
        @foreach (var assetType in AssetTypes.Where(x => x.Name.Contains(filterAssetTypes, StringComparison.InvariantCultureIgnoreCase)))
        {
            <MudMenuItem Disabled="@(assetType.AssetsCount == 0)" OnClick="@(e => OnAssetTypeSelected(assetType.Id))" AutoClose="false">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudText>@assetType.Name</MudText>
                    @if (assetType.AssetsCount == 0)
                    {
                        <MudText>Out of stock</MudText>
                    }
                    else
                    {
                        <MudText>@assetType.AssetsCount</MudText>
                    }
                </MudStack>
            </MudMenuItem>
        }
    }
    else
    {
        <MudTextField Placeholder="Filter items" T="string" Margin="Margin.Dense" Variant="Variant.Outlined" Immediate="true" TextChanged="@(e => filterAssets = e)" Class="ps-2 pe-2" />
        @foreach (var assetSerial in AssetSerials.Where(x => x.Name.Contains(filterAssets, StringComparison.InvariantCultureIgnoreCase) ||
                                                                x.Serial.Contains(filterAssets, StringComparison.InvariantCultureIgnoreCase)))
        {
            <MudMenuItem AutoClose="false" OnClick="@(e => OnAssetSerialSelected(assetSerial.Id))">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudText>@($"{assetSerial.Serial} {assetSerial.Name}")</MudText>
                </MudStack>
            </MudMenuItem>
        }
    }
</MudMenu>

@code {
    private List<GetEmployeeAssetSerials> Elements = new List<GetEmployeeAssetSerials>();
    private List<GetAssetTypeWithAssetsCount> AssetTypes = new List<GetAssetTypeWithAssetsCount>();
    private List<GetAssetSerial> AssetSerials = new List<GetAssetSerial>();

    [Parameter] public string UserName { get; set; } = null!;
    [Parameter] public GetEmployee Employee {get; set;} = null!;
    private string filterAssetTypes = string.Empty;
    private string filterAssets = string.Empty;
    private bool showPopover = false;
    private bool showAssetTypes = true;

    protected override async Task OnInitializedAsync()
    {
        Elements = await EmployeesService.GetEmployeeAssetsSerials(UserName);
        AssetTypes = await AssetTypesService.GetAssetTypeWithAssetsCount();
    }

    private void TogglePopover()
    {
        showPopover = !showPopover;
    }

    private async Task OnAssetTypeSelected(string assetTypeId)
    {
        showAssetTypes = !showAssetTypes;
        AssetSerials = await AssetSerialService.GetAssetSerials(assetTypeId);
    }

    private async Task OnAssetSerialSelected(string assetSerialId)
    {
        var userDisplay = new UserDisplay()
        {
            UserName = Employee.UserName,
            FirstName = Employee.FullName.Split(" ")[0],
            LastName = Employee.FullName.Split(" ")[1]
        };

        await AssetSerialService.UpdateSerial(new()
        {
            Id = assetSerialId,
            Status = Web.Shared.Enums.AssetStatus.Taken,
            UserDisplay = userDisplay
        });
        Elements = await EmployeesService.GetEmployeeAssetsSerials(UserName);
        AssetTypes = await AssetTypesService.GetAssetTypeWithAssetsCount();
        showAssetTypes = true;
    }
}
