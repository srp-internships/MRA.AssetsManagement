@using MRA.AssetsManagement.Web.Client.Services.AssetSerials
@using MRA.AssetsManagement.Web.Shared.AssetSerialHistory
@using MRA.AssetsManagement.Web.Shared.Enums
@inject IAssetSerialService AssetSerialService
@inject IDialogService DialogService

<MudButton FullWidth="true" Variant="Variant.Outlined" OnClick="LoadHistory">
    @if (isLoading)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Load history</MudText>
    }
    else
    {
        <MudIcon Icon="@Icons.Material.Filled.Refresh" />
        <MudText>Load history</MudText>
    }
</MudButton>

@if (ShowHistory)
{
    @if (isLoading)
    {
        <MudSkeleton Height="1rem" />
        <MudSkeleton Height="1rem" />
        <MudSkeleton Height="1rem" />
        <MudSkeleton Height="1rem" />
    }
    else
    {
        <MudText><b>Logs</b></MudText>
        <MudTimeline TimelineAlign="TimelineAlign.Default">
            @foreach (var history in Histories)
            {
                <MudTimelineItem Size="Size.Small" Color="@GetTimelineItemColor(history.Status)" TimelineAlign="GetTimelineAlign(history)">
                    <ItemOpposite>
                        <MudText Color="@GetTimelineItemColor(history.Status)" Typo="Typo.subtitle2">@history.Status</MudText>
                        @if (!string.IsNullOrEmpty(history.Note))
                        {
                            <MudIconButton Icon="@Icons.Material.Outlined.Comment" OnClick="@(e => ShowDialog(history))"></MudIconButton>
                        }
                    </ItemOpposite>
                    <ItemContent>
                        <MudText>@history.Date.ToString("dd MMM yyyy")</MudText>
                        @if (history.Employee is not null)
                        {
                            <MudText Typo="Typo.body2" Style="color: gray"> by @history.Employee</MudText>
                        }
                    </ItemContent>
                </MudTimelineItem>
                counter++;
            }
        </MudTimeline>
    }
}

@code {

    [Parameter] public string Serial { get; set; } = null!;
    [Parameter] public bool ShowHistory { get; set; }
    public bool showTimeLine = false;
    private bool isLoading = false;
    private List<GetAssetSerialHistory> Histories = [];
    private int counter = 1;

    private async Task LoadHistory()
    {
        isLoading = true;
        Histories = (await AssetSerialService.GetAssetSerialHistories(Serial)).ToList();
        isLoading = false;
        ShowHistory = true;
    }

    void ShowDialog(GetAssetSerialHistory history)
    {
        var parameters = new DialogParameters();
        parameters.Add("AssetSerialHistory", history);
        DialogService.Show<NoteDialog>("", parameters);
    }

    private Color GetTimelineItemColor(AssetStatus status)
    {
        return status switch
        {
            AssetStatus.Available => Color.Success,
            AssetStatus.Taken => Color.Info,
            AssetStatus.Broken => Color.Error,
            AssetStatus.Deprecated => Color.Default,
            _ => Color.Default
        };
    }

    private TimelineAlign GetTimelineAlign(GetAssetSerialHistory history) => history.Employee is not null ? TimelineAlign.End : TimelineAlign.End;
}
