@inject IMenuItemService MenuItemService;
@inject IIconService IconService;
@implements IDisposable;

<MudStack Spacing="4">
    <MudStack Row="true">
        <MudTextField T="string"
            ValueChanged="(string newValue) => SearchChanged(newValue)"
             Label="Search" 
             Margin="Margin.Dense" 
             Variant="Variant.Outlined"
             Adornment="Adornment.End" 
             AdornmentIcon="@Icons.Material.Filled.Search"
                      Immediate="true"
                      Clearable="true"/>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" aria-label="github" Href="@_hrefUrl"></MudIconButton>
    </MudStack>
    <MudDivider/>
    <MudNavMenu Rounded="true" Color="Color.Primary">

        @if (_loading)
        {
            foreach (var _ in Enumerable.Range(0, 3))
            {
                <MudStack Row="true" Class="ma-2">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="35px" Height="30px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="30px" Width="100%"/>
                </MudStack>
            }
        }
        else
        {
            @foreach (var menuItem in searchResult)
            {
                <MudNavLink Disabled="@menuItem.Disabled" Href="@menuItem.Route"
                            Icon="@IconService.GetIcon(menuItem.Icon)">
                    @menuItem.Title
                </MudNavLink>
            }
        }
    </MudNavMenu>
</MudStack>

@code {

    bool _loading = false;
    string _hrefUrl = "";

    List<MenuItem> MenuItems { get; set; } = new();
    List<MenuItem> searchResult = new();

    [Parameter] 
    public required IFetchMenuItemService Service { get; set; }

    [Parameter] 
    public required string BaseRoute { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _hrefUrl = BaseRoute;
        MenuItems = await Service.Fetch();
        MenuItemService.Changed += OnChanged;
        _loading = false;
        searchResult = MenuItems;
    }

    private void OnChanged(MenuItemEvent menuItemEvent, MenuItem menuItem)
    {
        switch (menuItemEvent)
        {
            case MenuItemEvent.Add:
                MenuItems.Add(menuItem);
                break;
            case MenuItemEvent.Update:
                int index = MenuItems.FindIndex(item => item.Id == menuItem.Id);
                if (index != -1)
                {
                    MenuItems[index] = menuItem;
                }

                break;
            case MenuItemEvent.Delete:
                MenuItems.Remove(menuItem);
                break;
            default:
                throw new NullReferenceException();
        }

        StateHasChanged();
    }

    private void SearchChanged(string searchText)
    {
        searchResult = MenuItems.Where(item => item.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    public void Dispose()
    {
        MenuItemService.Changed -= OnChanged;
    }
}